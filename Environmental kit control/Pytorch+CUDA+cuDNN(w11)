根據顯卡型號安裝NVIDIA驅動程式
https://www.nvidia.com.tw/Download/index.aspx?lang=tw


並查看顯示卡與tensorflow或pytorch支援的最高CUDA版本 nvidia-smi
https://developer.nvidia.com/cuda-gpus
https://tensorflow.google.cn/install/source_windows?hl=en#gpu
https://pytorch.org/get-started/locally/
或查閱CUDA本版相容性
https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html
安裝相應的CUDA版本
https://developer.nvidia.com/cuda-toolkit-archive


檢查cuDNN支援的CUDA與NVDIA驅動版本
https://docs.nvidia.com/deeplearning/cudnn/support-matrix/index.html
下載相應版本的cuDNN壓縮檔
https://developer.nvidia.com/rdp/cudnn-download
解壓縮cuDNN後將bin、include、lib覆蓋到CUDA資料夾中
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1


確認是否安裝成功
nvcc --version
nvidia-smi



檢查pytorch+cuda版本與是否順利進行
import torch
print(torch.__version__)
print(torch.cuda.is_available())


根據tensorflow官方公告
https://tensorflow.google.cn/install/source_windows?hl=en#gpu
從此本版後TensorFlow 對 Windows 上的 CUDA 構建不再提供支援。

1.15 以下版本的 CPU 和 GPU 套件各自獨立
pip install tensorflow==1.15      # CPU
pip install tensorflow-gpu==1.15  # GPU

Version	Python version	Compiler	Build tools
tensorflow-2.10.0	3.7-3.10	MSVC 2019	Bazel 5.1.1
Version	Python version	Compiler	Build tools	cuDNN	CUDA
tensorflow_gpu-2.10.0	3.7-3.10	MSVC 2019	Bazel 5.1.1	8.1	11.2

也就是說只能選擇在 WSL2 的 Linux 環境中構建/安裝 TensorFlow，並從那裡使用 GPU 功能。

另一種選擇則是使用 tensorflow-cpu 與 TensorFlow-DirectML-Plugin
其中 tensorflow-cpu 是 TensorFlow 的只用 CPU 的版本。
DirectML 是一個微軟的 DirectX 12 API，用於 GPU 加速機器學習的計算。
TensorFlow-DirectML 插件允許 TensorFlow 利用 DirectML 來在 Windows GPU 上運行模型。

測驗可行結果：python3.10.12 + tensorflow2.10.0(cuda11.2), pytorch2.0.1(cuda11.8) + cuda11.8 + cuDNN8.9.3

tensorflow在2.X.X版本以上，已整合CPU+GPU選擇功能。



pip3 install pandas
pip3 install matplotlib
pip3 install scikit-learn
pip3 install PyWavelets
pip3 install pydot
